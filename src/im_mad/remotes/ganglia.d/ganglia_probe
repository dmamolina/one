#!/usr/bin/env ruby

# Adds current directory to the library search path (make the script
# compatible with ruby 1.9.2)
$: << '.'

require 'socket'
require 'pp'
require 'rexml/document'

#############################
## CONFIGURATION GOES HERE ##
#############################

# host and port where to get monitoring information
GANGLIA_HOST='localhost'
GANGLIA_PORT=8649

# If this variable is set the the information will be read from that file
# otherwise it will get information from the ganglia endpoint
# defined previously
#GANGLIA_FILE='data.xml'

# Enables or disables the use of nokogiri libraries. This library
# is much faster than the bundled rexml. It needs nokogiri gem
# to be installed.
$nokogiri_enabled=false

# Helper function to print monitoring values
def print_info(name, value)
    return if value.nil? or value.to_s.strip.empty?
    puts "#{name}=\"#{value}\""
end


if $nokogiri_enabled
    require 'rubygems'
    require 'nokogiri'
end


# This class holds the parsing code of ganglia xml monitoring data
class GangliaHost

    # Initializes the object with raw xml data and the host we
    # want to monitor
    def initialize(xml, host)

        # Checks if the host was specified as an IP address to
        # choose the correct xpath string
        if host.match(/(\d{1,3}\.){3}\d{1,3}/)
            xpath="/GANGLIA_XML/CLUSTER/HOST[@IP='#{host}']"
        else
            xpath="/GANGLIA_XML/CLUSTER/HOST[@NAME='#{host}']"
        end

        if $nokogiri_enabled
            @doc=Nokogiri::XML.parse(xml)
            @host=@doc.xpath(xpath)
        else
            @doc=REXML::Document.new(xml)
            @host=@doc.root.elements[xpath]
        end
    end

    # Gets a metric value from the host
    def get_value(name)
        xpath="METRIC[@NAME='#{name}']"

        if $nokogiri_enabled
            metric=@host.xpath(xpath).first
        else
            metric=@host.elements[xpath]
        end

        if metric
            if $nokogiri_enabled
                metric.attr 'VAL'
            else
                metric.attributes['VAL']
            end
        else
            nil
        end
    end

    # The same as get_value
    def [](name)
        get_value(name)
    end

    # Returns a hash with the hosts metrics
    def to_hash
        xpath='METRIC'

        if $nokogiri_enabled
            values=Hash.new

            @host.xpath(xpath).each do |node|
                values[node.attr('NAME')]=node.attr('VAL')
            end

            values
        else
            values=Hash.new

            @host.elements.each(xpath) do |node|
                values[node.attributes['NAME']]=node.attributes['VAL']
            end

            values
        end
    end

    def info(name)
        "#{name}='#{self[name]}'"
    end
end


host=ARGV[1]

# Gets monitoring data from ganglia or file
begin
    if defined?(GANGLIA_FILE)
        xml=File.read(GANGLIA_FILE)
    else
        socket=TCPSocket.new(GANGLIA_HOST, GANGLIA_PORT)
        xml=socket.read
        socket.close
    end
rescue
    STDERR.puts "Error reading ganglia data"
end

# Parses monitoring value from ganglia xml. The second parameter the probe
# receives is the host we want to get information from
begin
    ganglia=GangliaHost.new(xml, host)
    data=ganglia.to_hash
rescue
    STDERR.puts "Error getting info from host '#{host}'"
    exit -1
end


# Monitoring info extraction and printing

total_cpu=data['cpu_num'].to_i*100

print_info("TOTALCPU", total_cpu)
print_info("CPUSPEED", data['cpu_speed'])

print_info("TOTALMEMORY", data['mem_total'])
print_info("USEDMEMORY", data['mem_total'].to_i-data['mem_free'].to_i)
print_info("FREEMEMORY", data['mem_free'].to_i)

free_cpu=(data['cpu_idle'].to_f/100.0) * total_cpu

print_info("FREECPU", free_cpu )
print_info("USEDCPU", total_cpu - free_cpu )

print_info("NETRX", data['bytes_out'])
print_info("NETTX", data['bytes_in'])

print_info("KVM_VERSION", data['KVM_VERSION'])
print_info("XEN_VERSION", data['XEN_VERSION'])



