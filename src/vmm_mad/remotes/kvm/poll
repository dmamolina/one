#!/usr/bin/env ruby

# -------------------------------------------------------------------------- #
# Copyright 2002-2011, OpenNebula Project Leads (OpenNebula.org)             #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

require 'pp'

def dom_info(vmid)
    text=`virsh dominfo #{vmid}`

    return nil if $?.exitstatus != 0

    lines=text.split(/\n/)

    data=lines.map do |line|
        parts=line.split(/:\s+/)
    end

    Hash[data]
end

def process_info(uuid)
    ps=`ps auxwww | grep -- '-uuid #{uuid}' | grep -v grep`
    ps.split(/\s+/)
end

def get_state(state)
    case state
    when *%w{running blocked shutdown dying}
        'a'
    when 'paused'
        'p'
    when 'crashed'
        'c'
    else
        'u'
    end
end

def print_data(name, value)
    if value
        "#{name}=\"#{value}\""
    else
        nil
    end
end

vm_id=ARGV[0]

if !vm_id or vm_id.empty?
    STDERR.puts "VM id not specified"
    exit(-1)
end

data=dom_info(vm_id)

if !data
    #STDERR.puts "Error getting info for '#{vm_id}'"
    #exit(-1)
    puts "STATUS=d"
    exit
end


ps_data=process_info(data['UUID'])


monitor=Hash.new

monitor[:cpu]=ps_data[2]
monitor[:resident_memory]=ps_data[5].to_i
monitor[:max_memory]=data['Max memory'].split(/\s+/).first.to_i

monitor[:memory]=[monitor[:resident_memory], monitor[:max_memory]].max


state=data['State']


monitor[:state]=get_state(data['State'])
monitor[:cpus]=data['CPU(s)']

values=Array.new

values << print_data('STATUS', monitor[:state])
values << print_data('USEDCPU', monitor[:cpu])
values << print_data('USEDMEMORY', monitor[:memory])

puts values.zip.join(',')
